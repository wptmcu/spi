
spi_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003803  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002fb7  00000000  00000000  00003aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000688  00000000  00000000  00006aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00007130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001859  00000000  00000000  00007238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018d  00000000  00000000  00008a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00008c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_20>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 86 00 	call	0x10c	; 0x10c <main>
 104:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <main>:
#include "spi.h"
#include "uart.h"

int main(void)
{
	sei();
 10c:	78 94       	sei
    SPI_init();
 10e:	0e 94 b7 00 	call	0x16e	; 0x16e <SPI_init>
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x6>

00000114 <__vector_20>:
    {
    }
}

ISR(SPI0_INT_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	0b b6       	in	r0, 0x3b	; 59
 120:	0f 92       	push	r0
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	uint8_t received_byte = SPI0_GetRxData();
 13a:	0e 94 c4 00 	call	0x188	; 0x188 <SPI0_GetRxData>
	SPI0.INTFLAGS = SPI_RXCIF_bm;
 13e:	90 e8       	ldi	r25, 0x80	; 128
 140:	90 93 43 09 	sts	0x0943, r25	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
	UART_sendChar(received_byte);
 144:	0e 94 cb 00 	call	0x196	; 0x196 <UART_sendChar>
	received_byte = 0;
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0b be       	out	0x3b, r0	; 59
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <SPI_init>:
#include <avr/io.h>


void SPI_init()
{
	PORTA.DIR = 0xD0;
 16e:	80 ed       	ldi	r24, 0xD0	; 208
 170:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
	SPI0.CTRLA = 0b00100001;
 174:	e0 e4       	ldi	r30, 0x40	; 64
 176:	f9 e0       	ldi	r31, 0x09	; 9
 178:	81 e2       	ldi	r24, 0x21	; 33
 17a:	80 83       	st	Z, r24
	SPI0.CTRLB = 0b10000000;	
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	81 83       	std	Z+1, r24	; 0x01
	SPI0.INTCTRL = 0b10000001;
 180:	81 e8       	ldi	r24, 0x81	; 129
 182:	82 83       	std	Z+2, r24	; 0x02
	SPI0.INTFLAGS = 0x00;
 184:	13 82       	std	Z+3, r1	; 0x03
 186:	08 95       	ret

00000188 <SPI0_GetRxData>:
}

uint8_t SPI0_GetRxData()
{
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
 188:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 18c:	88 23       	and	r24, r24
 18e:	e4 f7       	brge	.-8      	; 0x188 <SPI0_GetRxData>
	;
	return SPI0.DATA;
 190:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 194:	08 95       	ret

00000196 <UART_sendChar>:
	USART4.CTRLC |= USART_CHSIZE1_bm | USART_CHSIZE0_bm;
}

void UART_sendChar(char c)
{
	while (!(USART4.STATUS & USART_DREIF_bm))
 196:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7e0884>
 19a:	95 ff       	sbrs	r25, 5
 19c:	fc cf       	rjmp	.-8      	; 0x196 <UART_sendChar>
	{
		;
	}
	USART4.TXDATAL = c;
 19e:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
